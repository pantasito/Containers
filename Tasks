
1) В вывод таблицы результатов теста добавить горизонтальный разделитель, в виде строки с ===========.
	Т.е. например, было так:
	queue name| Test 1 | Test 2 | Test 3 |
           STL|   0.894|    1.07|   0.734|
           ARR|       0|   0.421|       0|

	а получиться должно так:
	queue name| Test 1 | Test 2 | Test 3 |
	======================================
		   STL|   0.603|   0.655|   0.734|
		   ARR|       0|   0.258|       0|

2) После тестирования каждой очереди добавить сообщение о том, сколько тестов было пройдено этой очередью.
	Например: раньше тестирование очереди выглядело так:
		Test queue: ARR
		Test_1: -=Error=-: empty return false, but expected true
		Test_2 completed. Time 0.265 sec
		Test_3: -=Error=-: size() return 1 but expected 0
	Необходимо в конце добавить строчку:
		Test queue: ARR
		Test_1: -=Error=-: empty return false, but expected true
		Test_2 completed. Time 0.265 sec
		Test_3: -=Error=-: size() return 1 but expected 0
		Queue ARR: 1 of 3 tests passed.

2*) Аналогичную информацию добавить в результатирующую таблицу:
	Было:
	queue name| Test 1 | Test 2 | Test 3 |
	======================================
		   STL|   0.603|   0.655|   0.734|
		   ARR|       0|   0.258|       0|
	Стало:
	queue name| Test 1 | Test 2 | Test 3 | Tests passed |
	=====================================================
		   STL|   0.603|   0.655|   0.734|          3/3 |   
		   ARR|       0|   0.258|       0|          1/3 |


3) Добавить механизм принта самой быстрой очереди (т.е. той очереди которая затратила меньше всех времени на ВСЕ тесты). 
	Т.е. просто в самом конце, после таблицы, написать например так:
	queue name| Test 1 | Test 2 | Test 3 | Tests passed |
	=====================================================
		   STL|   0.603|   0.655|   0.734|          3/3 |   
		   ARR|       0|   0.258|       0|          1/3 |

	Best queue: STL - 1.992. 

	Очереди, которые провалили хотя бы один из тестов считать нельзя. На данный момент можешь считать, что очередь провалила тест, если время выполнения теста равно 0 
	(хотя это не правильный критерий, но для начала сойдет).

4) Добавить новый тест, который делает с очередью следующее:
	"Добавляет 3 элемента", "очищает очередь", "добавляет 2 элемента" и "делает 2 раза pop()" и потом опять сначала "Добавляет 3 элемента" ... 
	и так iterations раз. Здесь на первом этапе вполне можно делать по аналогии с другими тестами не сильно вникая в подробности того что там происходит.
	Т.е. можно не вникать в устройство например LOG(1,"Check size of queue"); или THROW("size return " << q.size() << ". Expected 0");
	Важно понять КАК используются эти штуки и применить аналогично. 
