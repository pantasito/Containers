Для тестирования очереди содержащей инты, был написан специальный класс Test_int_queue (находится в файле Test.h).

Работа с этим классом осуществляется следующим образом:
	1) Сначала создается объект класса. Test_int_queue test;
	2) Потом в него можно добавлять очереди, которые будут тестироваться. Необходимо, чтобы класс тестируемой очереди был наследником класса a_queue.
		Добавить очередь в тестирование можно функцией test.add_queue_to_test(queue, name). 
			Например так: 
				stl_queue<int> stl_q;
				test.add_queue_to_test(stl_q,"STL");
		Второй параметр, это имя для очереди, которое будет печататься в результатах.
	3) После добавления очередей, которые надо протестировать, необходимо вызвать функцию test.run_all_tests(); Которая запустит процесс тестирования ВСЕХ добавленных 
		ранее очередей. В эту функцию можно передать интовский параметр, который укажет сколько итераций делать в каждом тесте. (по умолчанию стоит 10000).
		Результаты тестирования будут печататься в стандартный поток вывода cout.

Структура класса Test_int_queue:
	Т.к. при добавлении очереди в тест мы указываем и имя очереди, то необходимо хранить пару (очередь, имя очереди). Для этого внутри класса Test_int_queue 
	была организована структура named_queue.

	Все добавленные очереди хранятся в СТЛом векторе vector<named_queue> all_queues;
	
	Все тесты организованы в виде приватных функций класса 	Test_int_queue. Например double Test_2(a_queue<int>& q, int iterations = 10000);
	Каждая такая функция делает некоторые манипуляции с очередью, например первый тест сначала добавляет элемент в очередь, потом убирает, потом снова добавляет и так iterations раз.
	В конце тест возращает затраченное время.

	Функция test.run_all_tests() для каждой очереди запускает все тесты. Для каждого теста запоминает затраченное время (используется массив double** results = new double*[all_queues.size()];)
	После отработки всех тестов, функция выводит результатирующую таблицу.
